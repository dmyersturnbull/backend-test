
[build-system]
requires = ["hatchling~=1.7"]
build-backend = "hatchling.build"

[project]
name = "backend_test"
requires-python = "~=3.11"
readme = {file = "README.md", content-type = "text/markdown"}
version = "0.0.1-alpha0"
description = "Backend test repo"
keywords = ["backend", "test"]

dependencies = [
  "hypercorn >=0.14",
  "psycopg[binary] >=3.0",
  "psycopg_pool >= 3.0",
  "polars >=0.18",
  "fastapi >=0.100",
  "msgpack_asgi >=1.1",
]

[tool.hatch.envs.default]
dependencies = [
  "pre-commit >=3.3",
  "pytest  >=7.0",
  "coverage[toml] >=7.2",
  "mypy >=1.4",
  "pytest-cov >=4.0",
  "ruff >=0.0.280",
]

[tool.hatch.envs.default.scripts]
test = "pytest"
fmt = "pre-commit run --all-files"
lint = [
  "pre-commit run --all-files",
  "mypy {args:src/cicd tests}"
]

[tool.ruff]
line-length = 120  # 120 is hatch's default via 'hatch init'
include = [
  "*.py",            # Source
  "pyproject.toml",  # This (RUF checks)
  "*.ipynb"          # Jupyter notebooks
]
select = [
  "A", "ANN", "ASYNC", "B", "BLE", "C", "COM", "DTZ", "EM", "F", "FA", "E", "G", "I", "INP", "ISC", "N", "NPY", "PERF",
  "PGH", "PIE", "PL", "PTH", "Q", "RUF", "S", "SIM", "SLOT", "T10", "TCH", "TID", "UP", "W", "YTT", "RUF"
]
ignore = [
  "INP001",   # missing __init__ -- false positives
  "D107",     # Missing docstring in __init__ (put in class docstring)
  "D212",     # Multi-line docstring start (contradictory)
  "E501",     # Line > 79 chars (we use black)
]
unfixable = [
  "RUF100",   # Unused noqa (should fix manually)
]
flake8-bandit.check-typed-exception = true
pydocstyle.convention = "google"
flake8-tidy-imports.ban-relative-imports = "all"

[tool.ruff.per-file-ignores]
"tests/**/*" = [
  "INP001",   # missing __init__
  "PLR2004",  # magic values
  "S101",     # assert
  "TID252",   # relative imports
  "S105",     # Ignore checks for possible passwords
  "S106",
  "S107",
  "S108",     # Harcoded temp file
]

[tool.pytest.ini_options]
pythonpath = "./src"  # critical!
# coverage stops recursing after it finds one dir without an __init__.py
# so if it finds src/java-app before src/pyapp, it won't find pyapp
# So specify exactly which directories to test
addopts = "--cov=src/backend_test --cov-report xml:coverage.xml --cov-report term --cov-config=pyproject.toml tests/"
# show log output from the tests
# in the tests/ code, name the logger {pkg}-TEST to differentiate
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)8s] %(name)s: %(message)s (%(filename)s:%(lineno)s)"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"

[tool.coverage.run]
data_file = "coverage.xml"
branch = true    # quantify % coverage of execution branches
parallel = true  # note that pytest-cov overrides this
source_pkgs = ["backend_test"]
omit = ["src/**/__main__.py"]

[tool.coverage.paths]
source = ["src/"]


[tool.coverage.report]
fail_under = 95  # 95% coverage required
show_missing = true
exclude_lines = [
  "nocov",
  "raise AssertionError",
  "raise NotImplementedError",
  "if __name__ == .__main__.:",
  "if TYPE_CHECKING:",
]

[tool.black]
line-length = 120

[tool.mypy]
disallow_untyped_defs = true
disallow_incomplete_defs = true
pretty = true
show_column_numbers = true
warn_unused_ignores = true
